@page "/companyreview/create"
<PageTitle>Dodaj recenzję</PageTitle>

@using Cms.Application.CQRS.Commands.FileMetadata
@using Cms.Application.CQRS.Commands.CompanyReview
@using Cms.Application.CQRS.Queries.CompanyReviewQuery
@using Cms.Application.Interfaces
@using Cms.Application.DTO
@using Cms.Application.DataModules.DTO
@inject IFileHandlerService fileHandlerService
@inject ICompanyReviewService companyReviewService
@inject NavigationManager navigationManager

<h3>Dodaj Recenzję</h3>

<EditForm Model="@createReviewCommand" OnValidSubmit="CreateAsync">
    <DataAnnotationsValidator />
    <div class="mb-3 form-floating">
        <InputTextArea id="Content" @bind-Value="createReviewCommand.Content" class="form-control form-control-sm" placeholder="Opinia o Firmie" style="height: 250px;" />
        <label class="mb-1" style="color: #6C757D;" for="Content">Opis</label>
        <ValidationMessage For="() => createReviewCommand.Content" />
    </div>
    <div class="form-group">
        <label class="mb-1" style="color: #6C757D;" for="Files">Zdjęcia </label>
        <InputFile multiple="true" OnChange="@OnFileSelect" id="Files" class="form-control form-control-sm hidden" accept=".png,.jpg,.jpeg" />
    </div>
    <div class="d-flex">
        @if (isLoading)
        {
            <span class="d-block mt-2">Trwa ładowanie zdjęć</span>
        }
        else if (temporaryFileURI.Any())
        {
            <div class="d-flex gap-2 w-100" style="padding: 20px; border-left: 1px solid #ced4da; border-right: 1px solid #ced4da; border-bottom: 1px solid #ced4da; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px;">
                @foreach (var item in temporaryFileURI)
                {
                    <div class="d-inline-block text-center" style="width: 100px; height: 100px; position: relative;">
                        <img src="@item" alt="Review image preview" width="100" height="100" style="opacity: 0.7" />
                        <span style="position:absolute; top: 10px; right: 10px; color: red; font-size: 17px; cursor: pointer;" class="oi oi-trash" @onclick="() => RemoveFileAtIndex(temporaryFileURI.IndexOf(item))"></span>
                    </div>
                }
            </div>
        }
    </div>
    <button type="submit" class="btn btn-primary mt-3">Zapisz</button>
</EditForm>

<h4 class="mt-5">Zdjęcia recenzji</h4>

@code {
    private CreateCompanyReviewCommand createReviewCommand = new();
    private bool isLoading;
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;

    private List<IBrowserFile> imageFiles = new();
    private List<FileMetadataDTO> filesMetadata = new();
    private List<string> temporaryFileURI = new();
    private List<string> reviewImages = new List<string>(); 
    private List<string> errors = new();

    private async Task CreateAsync()
    {
        if (imageFiles != null && imageFiles.Any())
        {
            filesMetadata.Clear();

            foreach (var file in imageFiles)
            {
                await UploadFileAsync(file);
            }
        }

        createReviewCommand.ImageFilesMetadata = filesMetadata;

        var createdReview = await companyReviewService.CreateCompanyReviewAsync(createReviewCommand);

        if (createdReview != null)
        {
            navigationManager.NavigateTo("/companyreviews/edit/" + createdReview.CompanyReviewId, true);
        }
    }

    private async Task OnFileSelect(InputFileChangeEventArgs args)
    {
        isLoading = true;

        try
        {
            foreach (var file in args.GetMultipleFiles(maxAllowedFiles))
            {
                imageFiles.Add(file);

                var temporaryImage = await file.RequestImageFileAsync("image/jpg", 200, 200);

                using Stream tempImageStream = temporaryImage.OpenReadStream(maxFileSize);

                using MemoryStream ms = new();
                await tempImageStream.CopyToAsync(ms);

                temporaryFileURI.Add($"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
        }

        isLoading = false;
    }

    private async Task UploadFileAsync(IBrowserFile file)
    {
        if (file == null)
        {
            throw new ArgumentNullException("File not found");
        }

        if (file.Size > maxFileSize)
        {
            return;
        }

        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);

            var uploadFileDTO = new UploadFileDTO()
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    FileSize = file.Size,
                    Content = memoryStream.ToArray(),
                };

            var uploadResult = await fileHandlerService.UploadFileAsync(uploadFileDTO, new() {
                Code = FilePathCodeEnum.COMPANYREVIEW
            });

            if (uploadResult != null && uploadResult.IsSuccess)
            {
                var createResult = await fileHandlerService.CreateFileMetadataAsync(new CreateFileMetadataCommand()
                    {
                        FileName = file.Name,
                        ContentType = file.ContentType,
                        FileSize = file.Size,
                        FileFullPath = uploadResult.FileFullPath,
                        FileRelativePath = uploadResult.FileRelativePath,
                        FileExtension = Path.GetExtension(uploadResult.FileRelativePath)
                    });

                if (createResult != null)
                {
                    filesMetadata.Add(createResult);
                }
            }
            else
            {
                errors.Add(uploadResult?.ErrorMessage ?? "There was an error during file upload. Try again.");
            }

        }
        catch (Exception ex)
        {
            errors.Add(ex.Message);
        }
    }

    private void RemoveFileAtIndex(int index)
    {
        temporaryFileURI.RemoveAt(index);
        imageFiles.RemoveAt(index);
    }
}

       
